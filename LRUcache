class LRUCache {
public:
    unordered_map<int,list<pair<int,int>>::iterator>mp;
    list<pair<int,int>>cache;
    int size ;
    LRUCache(int capacity) {
        size = capacity;
    }
    
    int removeKey(int key){

        auto it = mp[key];
        int value = it->second;
        cache.erase(it);
        mp.erase(key);
        return value;
    }
    void insertKey(int key,int value){
        cache.push_front({key,value});
        mp[key]=cache.begin();
    }
    int get(int key) {
        if(mp.find(key) == mp.end())return -1;
     
        int value = removeKey(key);
        insertKey(key,value);
        return value;
        

    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            removeKey(key);
        }

        insertKey(key,value);
        if(mp.size()>size){
            auto it = cache.back();
            mp.erase(it.first);
            cache.pop_back();
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
